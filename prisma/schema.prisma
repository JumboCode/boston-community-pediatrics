generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  VOLUNTEER
  ADMIN
}

model User {
  id            String     @id @default(cuid())
  clerkId       String     @default("placeholder")
  firstName     String
  lastName      String
  emailAddress  String?    @unique
  phoneNumber   String
  dateOfBirth   DateTime?
  streetAddress String?
  city          String?
  state         String?
  country       String?
  zipCode       String?
  hoursWorked   Int         @default(0)
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")
  role          UserRole

  signups       EventSignup[]
  waitlists     EventWaitlist[]

  @@map("users")
}

model Event {
  id          String    @id @default(cuid())
  name        String
  description String
  date        DateTime[]
  startTime   DateTime
  endTime     DateTime

  // Location
  address     String
  street      String?
  city        String?
  state       String?
  country     String?
  zipCode     String?
  lat         Float?
  lng         Float?

  positions   EventPosition[]
  signups     EventSignup[]
}

model EventSignup {
  id         String       @id @default(cuid())
  userId     String?      // null if guest signup only
  eventId    String
  positionId String
  hasGuests    Boolean      @default(false) 
  date       DateTime?
  time       DateTime?
  notes      String?

  user       User?        @relation(fields: [userId], references: [id])
  event      Event        @relation(fields: [eventId], references: [id])
  position   EventPosition @relation(fields: [positionId], references: [id])
  guests     Guest[]
}

model EventPosition {
  id             String             @id @default(cuid())
  position       String
  eventId        String
  date           DateTime
  startTime      DateTime
  endTime        DateTime
  description    String
  filledSlots    Int
  totalSlots     Int
  lat            Float?
  lng            Float?

  event          Event              @relation(fields: [eventId], references: [id])
  signups        EventSignup[]
  waitlists      EventWaitlist[]
}

model Guest {
  id           String      @id @default(cuid())
  positionId   String
  firstName    String
  lastName     String
  emailAddress String?
  relation     String?     // relation to main user (friend, family, etc.)
  phoneNumber  String?

  signupId  String
  signup    EventSignup @relation(fields: [signupId], references: [id])
}


model EventWaitlist {
  id         String        @id @default(cuid())
  userId     String?
  positionId String
  isGuest    Boolean       @default(false)

  user       User?         @relation(fields: [userId], references: [id])
  position   EventPosition @relation(fields: [positionId], references: [id])
  guests     WaitlistGuest[]

}

model WaitlistGuest {
  id         String       @id @default(cuid())
  firstName  String
  lastName   String
  email      String?
  relation   String?
  waitlistId String
  waitlist   EventWaitlist @relation(fields: [waitlistId], references: [id])
}